/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { MonthlyUsageSummaryDto } from './monthly-usage-summary-dto';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class WaterAccountParcelWaterMeasurementDto { 
    ParcelID?: number;
    ParcelNumber?: string | null;
    ParcelArea?: number | null;
    UsageLocationArea?: number | null;
    WaterMeasurementTypeID?: number;
    WaterMeasurementTypeName?: string | null;
    WaterMeasurementCategoryTypeName?: string | null;
    WaterMeasurementMonthlyValues?: Array<MonthlyUsageSummaryDto> | null;
    WaterMeasurementTotalValue?: number | null;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface WaterAccountParcelWaterMeasurementDtoForm { 
    ParcelID?: FormControl<number>;
    ParcelNumber?: FormControl<string>;
    ParcelArea?: FormControl<number>;
    UsageLocationArea?: FormControl<number>;
    WaterMeasurementTypeID?: FormControl<number>;
    WaterMeasurementTypeName?: FormControl<string>;
    WaterMeasurementCategoryTypeName?: FormControl<string>;
    WaterMeasurementMonthlyValues?: FormControl<Array<MonthlyUsageSummaryDto>>;
    WaterMeasurementTotalValue?: FormControl<number>;
}

export class WaterAccountParcelWaterMeasurementDtoFormControls { 
    public static ParcelID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ParcelNumber = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ParcelArea = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UsageLocationArea = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterMeasurementTypeID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterMeasurementTypeName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterMeasurementCategoryTypeName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterMeasurementMonthlyValues = (value: FormControlState<Array<MonthlyUsageSummaryDto>> | Array<MonthlyUsageSummaryDto> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<MonthlyUsageSummaryDto>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterMeasurementTotalValue = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

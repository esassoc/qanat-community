/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { SelfReportStatusSimpleDto } from './self-report-status-simple-dto';
import { UsageLocationDto } from './usage-location-dto';
import { GeographyMinimalDto } from './geography-minimal-dto';
import { WaterAccountMinimalDto } from './water-account-minimal-dto';
import { UserWithFullNameDto } from './user-with-full-name-dto';
import { ReportingPeriodSimpleDto } from './reporting-period-simple-dto';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class WaterAccountCoverCropStatusDto { 
    WaterAccountCoverCropStatusID?: number | null;
    Geography?: GeographyMinimalDto;
    SelfReportStatus?: SelfReportStatusSimpleDto;
    ReportingPeriod?: ReportingPeriodSimpleDto;
    WaterAccount?: WaterAccountMinimalDto;
    UsageLocations?: Array<UsageLocationDto> | null;
    readonly CountOfCoverCroppedUsageLocations?: number;
    readonly AcresCoverCropped?: number;
    CurrentUserCanEdit?: boolean;
    SubmittedByUser?: UserWithFullNameDto;
    SubmittedDate?: string | null;
    ApprovedByUser?: UserWithFullNameDto;
    ApprovedDate?: string | null;
    ReturnedByUser?: UserWithFullNameDto;
    ReturnedDate?: string | null;
    CreateUser?: UserWithFullNameDto;
    CreateDate?: string | null;
    UpdateUser?: UserWithFullNameDto;
    UpdateDate?: string | null;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface WaterAccountCoverCropStatusDtoForm { 
    WaterAccountCoverCropStatusID?: FormControl<number>;
    Geography?: FormControl<GeographyMinimalDto>;
    SelfReportStatus?: FormControl<SelfReportStatusSimpleDto>;
    ReportingPeriod?: FormControl<ReportingPeriodSimpleDto>;
    WaterAccount?: FormControl<WaterAccountMinimalDto>;
    UsageLocations?: FormControl<Array<UsageLocationDto>>;
    CountOfCoverCroppedUsageLocations?: FormControl<number>;
    AcresCoverCropped?: FormControl<number>;
    CurrentUserCanEdit?: FormControl<boolean>;
    SubmittedByUser?: FormControl<UserWithFullNameDto>;
    SubmittedDate?: FormControl<string>;
    ApprovedByUser?: FormControl<UserWithFullNameDto>;
    ApprovedDate?: FormControl<string>;
    ReturnedByUser?: FormControl<UserWithFullNameDto>;
    ReturnedDate?: FormControl<string>;
    CreateUser?: FormControl<UserWithFullNameDto>;
    CreateDate?: FormControl<string>;
    UpdateUser?: FormControl<UserWithFullNameDto>;
    UpdateDate?: FormControl<string>;
}

export class WaterAccountCoverCropStatusDtoFormControls { 
    public static WaterAccountCoverCropStatusID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Geography = (value: FormControlState<GeographyMinimalDto> | GeographyMinimalDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<GeographyMinimalDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static SelfReportStatus = (value: FormControlState<SelfReportStatusSimpleDto> | SelfReportStatusSimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<SelfReportStatusSimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ReportingPeriod = (value: FormControlState<ReportingPeriodSimpleDto> | ReportingPeriodSimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<ReportingPeriodSimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterAccount = (value: FormControlState<WaterAccountMinimalDto> | WaterAccountMinimalDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<WaterAccountMinimalDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UsageLocations = (value: FormControlState<Array<UsageLocationDto>> | Array<UsageLocationDto> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<UsageLocationDto>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CountOfCoverCroppedUsageLocations = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static AcresCoverCropped = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CurrentUserCanEdit = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static SubmittedByUser = (value: FormControlState<UserWithFullNameDto> | UserWithFullNameDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<UserWithFullNameDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static SubmittedDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ApprovedByUser = (value: FormControlState<UserWithFullNameDto> | UserWithFullNameDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<UserWithFullNameDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ApprovedDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ReturnedByUser = (value: FormControlState<UserWithFullNameDto> | UserWithFullNameDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<UserWithFullNameDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ReturnedDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CreateUser = (value: FormControlState<UserWithFullNameDto> | UserWithFullNameDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<UserWithFullNameDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CreateDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UpdateUser = (value: FormControlState<UserWithFullNameDto> | UserWithFullNameDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<UserWithFullNameDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UpdateDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

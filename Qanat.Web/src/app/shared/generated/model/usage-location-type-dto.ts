/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { GeographyDisplayDto } from './geography-display-dto';
import { UserDisplayDto } from './user-display-dto';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class UsageLocationTypeDto { 
    UsageLocationTypeID?: number;
    Geography?: GeographyDisplayDto;
    Name?: string | null;
    Definition?: string | null;
    CanBeRemoteSensed?: boolean;
    IsIncludedInUsageCalculation?: boolean;
    IsDefault?: boolean;
    ColorHex?: string | null;
    SortOrder?: number;
    CanBeSelectedInCoverCropForm?: boolean;
    CountsAsCoverCropped?: boolean;
    CanBeSelectedInFallowForm?: boolean;
    CountsAsFallowed?: boolean;
    CreateDate?: string;
    CreateUser?: UserDisplayDto;
    UpdateDate?: string | null;
    UpdateUser?: UserDisplayDto;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface UsageLocationTypeDtoForm { 
    UsageLocationTypeID?: FormControl<number>;
    Geography?: FormControl<GeographyDisplayDto>;
    Name?: FormControl<string>;
    Definition?: FormControl<string>;
    CanBeRemoteSensed?: FormControl<boolean>;
    IsIncludedInUsageCalculation?: FormControl<boolean>;
    IsDefault?: FormControl<boolean>;
    ColorHex?: FormControl<string>;
    SortOrder?: FormControl<number>;
    CanBeSelectedInCoverCropForm?: FormControl<boolean>;
    CountsAsCoverCropped?: FormControl<boolean>;
    CanBeSelectedInFallowForm?: FormControl<boolean>;
    CountsAsFallowed?: FormControl<boolean>;
    CreateDate?: FormControl<string>;
    CreateUser?: FormControl<UserDisplayDto>;
    UpdateDate?: FormControl<string>;
    UpdateUser?: FormControl<UserDisplayDto>;
}

export class UsageLocationTypeDtoFormControls { 
    public static UsageLocationTypeID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Geography = (value: FormControlState<GeographyDisplayDto> | GeographyDisplayDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<GeographyDisplayDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Name = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Definition = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CanBeRemoteSensed = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static IsIncludedInUsageCalculation = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static IsDefault = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ColorHex = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static SortOrder = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CanBeSelectedInCoverCropForm = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CountsAsCoverCropped = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CanBeSelectedInFallowForm = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CountsAsFallowed = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CreateDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CreateUser = (value: FormControlState<UserDisplayDto> | UserDisplayDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<UserDisplayDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UpdateDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UpdateUser = (value: FormControlState<UserDisplayDto> | UserDisplayDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<UserDisplayDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

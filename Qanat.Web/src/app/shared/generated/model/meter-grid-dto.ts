/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { MeterStatusSimpleDto } from './meter-status-simple-dto';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class MeterGridDto { 
    MeterID?: number;
    SerialNumber: string;
    DeviceName?: string | null;
    Make?: string | null;
    ModelNumber?: string | null;
    GeographyID: number;
    MeterStatusID: number;
    MeterStatus?: MeterStatusSimpleDto;
    WellID?: number | null;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface MeterGridDtoForm { 
    MeterID?: FormControl<number>;
    SerialNumber: FormControl<string>;
    DeviceName?: FormControl<string>;
    Make?: FormControl<string>;
    ModelNumber?: FormControl<string>;
    GeographyID: FormControl<number>;
    MeterStatusID: FormControl<number>;
    MeterStatus?: FormControl<MeterStatusSimpleDto>;
    WellID?: FormControl<number>;
}

export class MeterGridDtoFormControls { 
    public static MeterID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static SerialNumber = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
                Validators.minLength(1),
                Validators.maxLength(255),
            ],
        }
    );
    public static DeviceName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
                Validators.maxLength(255),
            ],
        }
    );
    public static Make = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
                Validators.maxLength(255),
            ],
        }
    );
    public static ModelNumber = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
                Validators.maxLength(255),
            ],
        }
    );
    public static GeographyID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
            ],
        }
    );
    public static MeterStatusID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
            ],
        }
    );
    public static MeterStatus = (value: FormControlState<MeterStatusSimpleDto> | MeterStatusSimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<MeterStatusSimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WellID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

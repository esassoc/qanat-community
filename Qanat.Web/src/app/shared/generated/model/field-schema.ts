/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { VisibilityRule } from './visibility-rule';
import { BaseDataType } from './base-data-type';
import { LayoutType } from './layout-type';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class FieldSchema { 
    Name: string;
    CanonicalName: string;
    DataType: BaseDataType;
    GroupCanonicalName?: string | null;
    Description?: string | null;
    SummarySequence?: number | null;
    LayoutType?: LayoutType;
    VisibilityRule?: VisibilityRule;
    FieldDependencies?: Array<string> | null;
    AdditionalProperties?: { [key: string]: any | null; } | null;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface FieldSchemaForm { 
    Name: FormControl<string>;
    CanonicalName: FormControl<string>;
    DataType: FormControl<BaseDataType>;
    GroupCanonicalName?: FormControl<string>;
    Description?: FormControl<string>;
    SummarySequence?: FormControl<number>;
    LayoutType?: FormControl<LayoutType>;
    VisibilityRule?: FormControl<VisibilityRule>;
    FieldDependencies?: FormControl<Array<string>>;
    AdditionalProperties?: FormControl<{ [key: string]: any | null; }>;
}

export class FieldSchemaFormControls { 
    public static Name = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
                Validators.minLength(1),
            ],
        }
    );
    public static CanonicalName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
                Validators.minLength(1),
            ],
        }
    );
    public static DataType = (value: FormControlState<BaseDataType> | BaseDataType = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<BaseDataType>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
            ],
        }
    );
    public static GroupCanonicalName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Description = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static SummarySequence = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
                Validators.min(1),
                Validators.max(3),
            ],
        }
    );
    public static LayoutType = (value: FormControlState<LayoutType> | LayoutType = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<LayoutType>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static VisibilityRule = (value: FormControlState<VisibilityRule> | VisibilityRule = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<VisibilityRule>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FieldDependencies = (value: FormControlState<Array<string>> | Array<string> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<string>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static AdditionalProperties = (value: FormControlState<{ [key: string]: any | null; }> | { [key: string]: any | null; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: any | null; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class StatementTemplateUpsertDto { 
    GeographyID: number;
    StatementTemplateTypeID: number;
    TemplateTitle: string;
    InternalDescription?: string | null;
    CustomFieldsContent: { [key: string]: string | null; };
    CustomLabels: { [key: string]: string | null; };
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface StatementTemplateUpsertDtoForm { 
    GeographyID: FormControl<number>;
    StatementTemplateTypeID: FormControl<number>;
    TemplateTitle: FormControl<string>;
    InternalDescription?: FormControl<string>;
    CustomFieldsContent: FormControl<{ [key: string]: string | null; }>;
    CustomLabels: FormControl<{ [key: string]: string | null; }>;
}

export class StatementTemplateUpsertDtoFormControls { 
    public static GeographyID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
            ],
        }
    );
    public static StatementTemplateTypeID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
            ],
        }
    );
    public static TemplateTitle = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
                Validators.minLength(1),
                Validators.maxLength(100),
            ],
        }
    );
    public static InternalDescription = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CustomFieldsContent = (value: FormControlState<{ [key: string]: string | null; }> | { [key: string]: string | null; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: string | null; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
            ],
        }
    );
    public static CustomLabels = (value: FormControlState<{ [key: string]: string | null; }> | { [key: string]: string | null; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: string | null; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
            ],
        }
    );
}

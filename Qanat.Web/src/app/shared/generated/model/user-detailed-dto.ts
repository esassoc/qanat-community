/**
 * Qanat.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { WaterAccountMinimalDto } from '././water-account-minimal-dto';

import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class UserDetailedDto { 
    UserID?: number;
    FirstName?: string;
    LastName?: string;
    Email?: string;
    readonly FullName?: string;
    UserGuid?: string;
    Phone?: string;
    LoginName?: string;
    ReceiveSupportEmails?: boolean;
    RoleID?: number;
    RoleDisplayName?: string;
    HasActiveTrades?: boolean;
    AcreFeetOfWaterPurchased?: number;
    AcreFeetOfWaterSold?: number;
    IsActive?: boolean;
    AssociatedWaterAccounts?: Array<WaterAccountMinimalDto>;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface UserDetailedDtoForm { 
    UserID?: FormControl<number>;
    FirstName?: FormControl<string>;
    LastName?: FormControl<string>;
    Email?: FormControl<string>;
    FullName?: FormControl<string>;
    UserGuid?: FormControl<string>;
    Phone?: FormControl<string>;
    LoginName?: FormControl<string>;
    ReceiveSupportEmails?: FormControl<boolean>;
    RoleID?: FormControl<number>;
    RoleDisplayName?: FormControl<string>;
    HasActiveTrades?: FormControl<boolean>;
    AcreFeetOfWaterPurchased?: FormControl<number>;
    AcreFeetOfWaterSold?: FormControl<number>;
    IsActive?: FormControl<boolean>;
    AssociatedWaterAccounts?: FormControl<Array<WaterAccountMinimalDto>>;
}

export class UserDetailedDtoFormControls { 
    public static UserID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FirstName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static LastName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Email = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FullName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UserGuid = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Phone = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static LoginName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ReceiveSupportEmails = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static RoleID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static RoleDisplayName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static HasActiveTrades = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static AcreFeetOfWaterPurchased = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static AcreFeetOfWaterSold = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static IsActive = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static AssociatedWaterAccounts = (value: FormControlState<Array<WaterAccountMinimalDto>> | Array<WaterAccountMinimalDto> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<WaterAccountMinimalDto>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

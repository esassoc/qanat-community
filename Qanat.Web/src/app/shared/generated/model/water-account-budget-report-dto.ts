/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class WaterAccountBudgetReportDto { 
    GeographyID?: number;
    GeographyName?: string | null;
    WaterAccountID?: number;
    WaterAccountNumber?: number;
    WaterAccountName?: string | null;
    ParcelArea?: number;
    ParcelCount?: number;
    UsageLocationArea?: number;
    TotalSupply?: number;
    UsageToDate?: number;
    CurrentAvailable?: number;
    WaterSupplyByWaterType?: { [key: string]: number; } | null;
    WaterAccountUrl?: string | null;
    ZoneIDs?: string | null;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface WaterAccountBudgetReportDtoForm { 
    GeographyID?: FormControl<number>;
    GeographyName?: FormControl<string>;
    WaterAccountID?: FormControl<number>;
    WaterAccountNumber?: FormControl<number>;
    WaterAccountName?: FormControl<string>;
    ParcelArea?: FormControl<number>;
    ParcelCount?: FormControl<number>;
    UsageLocationArea?: FormControl<number>;
    TotalSupply?: FormControl<number>;
    UsageToDate?: FormControl<number>;
    CurrentAvailable?: FormControl<number>;
    WaterSupplyByWaterType?: FormControl<{ [key: string]: number; }>;
    WaterAccountUrl?: FormControl<string>;
    ZoneIDs?: FormControl<string>;
}

export class WaterAccountBudgetReportDtoFormControls { 
    public static GeographyID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static GeographyName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterAccountID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterAccountNumber = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterAccountName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ParcelArea = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ParcelCount = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UsageLocationArea = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalSupply = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UsageToDate = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CurrentAvailable = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterSupplyByWaterType = (value: FormControlState<{ [key: string]: number; }> | { [key: string]: number; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: number; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterAccountUrl = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ZoneIDs = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

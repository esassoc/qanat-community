/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { FieldSchema } from './field-schema';
import { GroupSchema } from './group-schema';
import { NotMeasurableSchema } from './not-measurable-schema';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class NestedRecordSetType { 
    readonly Type?: string | null;
    Nullable: boolean;
    Name: string;
    CanonicalName: string;
    Description?: string | null;
    RecordSetNotMeasurable?: NotMeasurableSchema;
    RecordNotMeasurable?: NotMeasurableSchema;
    MinCount?: number;
    MaxCount?: number | null;
    GroupSchemata?: Array<GroupSchema> | null;
    AdditionalProperties?: { [key: string]: any | null; } | null;
    FieldSchemata: Array<FieldSchema>;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface NestedRecordSetTypeForm { 
    Type?: FormControl<string>;
    Nullable: FormControl<boolean>;
    Name: FormControl<string>;
    CanonicalName: FormControl<string>;
    Description?: FormControl<string>;
    RecordSetNotMeasurable?: FormControl<NotMeasurableSchema>;
    RecordNotMeasurable?: FormControl<NotMeasurableSchema>;
    MinCount?: FormControl<number>;
    MaxCount?: FormControl<number>;
    GroupSchemata?: FormControl<Array<GroupSchema>>;
    AdditionalProperties?: FormControl<{ [key: string]: any | null; }>;
    FieldSchemata: FormControl<Array<FieldSchema>>;
}

export class NestedRecordSetTypeFormControls { 
    public static Type = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Nullable = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
            ],
        }
    );
    public static Name = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
                Validators.minLength(1),
            ],
        }
    );
    public static CanonicalName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
                Validators.minLength(1),
            ],
        }
    );
    public static Description = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static RecordSetNotMeasurable = (value: FormControlState<NotMeasurableSchema> | NotMeasurableSchema = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<NotMeasurableSchema>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static RecordNotMeasurable = (value: FormControlState<NotMeasurableSchema> | NotMeasurableSchema = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<NotMeasurableSchema>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static MinCount = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
                Validators.min(0),
                Validators.max(2147483647),
            ],
        }
    );
    public static MaxCount = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
                Validators.min(1),
                Validators.max(2147483647),
            ],
        }
    );
    public static GroupSchemata = (value: FormControlState<Array<GroupSchema>> | Array<GroupSchema> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<GroupSchema>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static AdditionalProperties = (value: FormControlState<{ [key: string]: any | null; }> | { [key: string]: any | null; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: any | null; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FieldSchemata = (value: FormControlState<Array<FieldSchema>> | Array<FieldSchema> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<FieldSchema>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
            ],
        }
    );
}

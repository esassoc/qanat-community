/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ScenarioRunResultPointOfInterest } from './scenario-run-result-point-of-interest';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class ScenarioRunResult { 
    AverageChangeInWaterLevel?: number;
    TotalChangeInAquiferStorage?: number;
    PercentChangeInAquiferStorage?: number;
    TotalChangeInPumping?: number;
    TotalChangeInRecharge?: number;
    TotalChangeInGainFromStream?: number | null;
    PointsOfInterest?: Array<ScenarioRunResultPointOfInterest> | null;
    ModelRunEndDate?: string;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface ScenarioRunResultForm { 
    AverageChangeInWaterLevel?: FormControl<number>;
    TotalChangeInAquiferStorage?: FormControl<number>;
    PercentChangeInAquiferStorage?: FormControl<number>;
    TotalChangeInPumping?: FormControl<number>;
    TotalChangeInRecharge?: FormControl<number>;
    TotalChangeInGainFromStream?: FormControl<number>;
    PointsOfInterest?: FormControl<Array<ScenarioRunResultPointOfInterest>>;
    ModelRunEndDate?: FormControl<string>;
}

export class ScenarioRunResultFormControls { 
    public static AverageChangeInWaterLevel = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalChangeInAquiferStorage = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static PercentChangeInAquiferStorage = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalChangeInPumping = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalChangeInRecharge = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalChangeInGainFromStream = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static PointsOfInterest = (value: FormControlState<Array<ScenarioRunResultPointOfInterest>> | Array<ScenarioRunResultPointOfInterest> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<ScenarioRunResultPointOfInterest>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ModelRunEndDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

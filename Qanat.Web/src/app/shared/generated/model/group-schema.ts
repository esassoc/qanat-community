/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { VisibilityRule } from './visibility-rule';
import { NotMeasurableSchema } from './not-measurable-schema';
import { LayoutType } from './layout-type';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class GroupSchema { 
    Name?: string | null;
    CanonicalName?: string | null;
    Description?: string | null;
    NotMeasurable?: NotMeasurableSchema;
    LayoutType?: LayoutType;
    VisibilityRule?: VisibilityRule;
    AdditionalProperties?: { [key: string]: any | null; } | null;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface GroupSchemaForm { 
    Name?: FormControl<string>;
    CanonicalName?: FormControl<string>;
    Description?: FormControl<string>;
    NotMeasurable?: FormControl<NotMeasurableSchema>;
    LayoutType?: FormControl<LayoutType>;
    VisibilityRule?: FormControl<VisibilityRule>;
    AdditionalProperties?: FormControl<{ [key: string]: any | null; }>;
}

export class GroupSchemaFormControls { 
    public static Name = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CanonicalName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Description = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static NotMeasurable = (value: FormControlState<NotMeasurableSchema> | NotMeasurableSchema = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<NotMeasurableSchema>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static LayoutType = (value: FormControlState<LayoutType> | LayoutType = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<LayoutType>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static VisibilityRule = (value: FormControlState<VisibilityRule> | VisibilityRule = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<VisibilityRule>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static AdditionalProperties = (value: FormControlState<{ [key: string]: any | null; }> | { [key: string]: any | null; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: any | null; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

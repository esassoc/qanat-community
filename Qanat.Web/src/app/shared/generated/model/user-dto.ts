/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { GeographyUserSimpleDto } from './geography-user-simple-dto';
import { Rights } from './rights';
import { ModelSimpleDto } from './model-simple-dto';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class UserDto { 
    UserID?: number;
    UserGuid?: string | null;
    FirstName?: string | null;
    LastName?: string | null;
    Email?: string | null;
    Phone?: string | null;
    RoleID?: number;
    RoleDisplayName?: string | null;
    CreateDate?: string;
    UpdateDate?: string | null;
    LastActivityDate?: string | null;
    DisclaimerAcknowledgedDate?: string | null;
    IsActive?: boolean;
    ReceiveSupportEmails?: boolean;
    LoginName?: string | null;
    Company?: string | null;
    ImpersonatedUserGuid?: string | null;
    IsClientUser?: boolean;
    FullName?: string | null;
    Rights?: { [key: string]: Rights; } | null;
    Flags?: { [key: string]: boolean; } | null;
    GeographyRights?: { [key: string]: { [key: string]: Rights; } | null; } | null;
    GeographyFlags?: { [key: string]: { [key: string]: boolean; } | null; } | null;
    WaterAccountRights?: { [key: string]: { [key: string]: Rights; } | null; } | null;
    WaterAccountFlags?: { [key: string]: { [key: string]: boolean; } | null; } | null;
    NumberOfWaterAccounts?: number;
    GeographyUser?: Array<GeographyUserSimpleDto> | null;
    ScenarioPlannerRoleID?: number;
    ScenarioPlannerRoleDisplayName?: string | null;
    Models?: Array<ModelSimpleDto> | null;
    ScenarioPlannerRights?: { [key: string]: Rights; } | null;
    GETRunCustomerID?: number | null;
    GETRunUserID?: number | null;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface UserDtoForm { 
    UserID?: FormControl<number>;
    UserGuid?: FormControl<string>;
    FirstName?: FormControl<string>;
    LastName?: FormControl<string>;
    Email?: FormControl<string>;
    Phone?: FormControl<string>;
    RoleID?: FormControl<number>;
    RoleDisplayName?: FormControl<string>;
    CreateDate?: FormControl<string>;
    UpdateDate?: FormControl<string>;
    LastActivityDate?: FormControl<string>;
    DisclaimerAcknowledgedDate?: FormControl<string>;
    IsActive?: FormControl<boolean>;
    ReceiveSupportEmails?: FormControl<boolean>;
    LoginName?: FormControl<string>;
    Company?: FormControl<string>;
    ImpersonatedUserGuid?: FormControl<string>;
    IsClientUser?: FormControl<boolean>;
    FullName?: FormControl<string>;
    Rights?: FormControl<{ [key: string]: Rights; }>;
    Flags?: FormControl<{ [key: string]: boolean; }>;
    GeographyRights?: FormControl<{ [key: string]: { [key: string]: Rights; } | null; }>;
    GeographyFlags?: FormControl<{ [key: string]: { [key: string]: boolean; } | null; }>;
    WaterAccountRights?: FormControl<{ [key: string]: { [key: string]: Rights; } | null; }>;
    WaterAccountFlags?: FormControl<{ [key: string]: { [key: string]: boolean; } | null; }>;
    NumberOfWaterAccounts?: FormControl<number>;
    GeographyUser?: FormControl<Array<GeographyUserSimpleDto>>;
    ScenarioPlannerRoleID?: FormControl<number>;
    ScenarioPlannerRoleDisplayName?: FormControl<string>;
    Models?: FormControl<Array<ModelSimpleDto>>;
    ScenarioPlannerRights?: FormControl<{ [key: string]: Rights; }>;
    GETRunCustomerID?: FormControl<number>;
    GETRunUserID?: FormControl<number>;
}

export class UserDtoFormControls { 
    public static UserID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UserGuid = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FirstName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static LastName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Email = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Phone = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static RoleID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static RoleDisplayName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CreateDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UpdateDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static LastActivityDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static DisclaimerAcknowledgedDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static IsActive = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ReceiveSupportEmails = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static LoginName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Company = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ImpersonatedUserGuid = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static IsClientUser = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FullName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Rights = (value: FormControlState<{ [key: string]: Rights; }> | { [key: string]: Rights; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: Rights; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Flags = (value: FormControlState<{ [key: string]: boolean; }> | { [key: string]: boolean; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: boolean; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static GeographyRights = (value: FormControlState<{ [key: string]: { [key: string]: Rights; } | null; }> | { [key: string]: { [key: string]: Rights; } | null; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: { [key: string]: Rights; } | null; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static GeographyFlags = (value: FormControlState<{ [key: string]: { [key: string]: boolean; } | null; }> | { [key: string]: { [key: string]: boolean; } | null; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: { [key: string]: boolean; } | null; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterAccountRights = (value: FormControlState<{ [key: string]: { [key: string]: Rights; } | null; }> | { [key: string]: { [key: string]: Rights; } | null; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: { [key: string]: Rights; } | null; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterAccountFlags = (value: FormControlState<{ [key: string]: { [key: string]: boolean; } | null; }> | { [key: string]: { [key: string]: boolean; } | null; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: { [key: string]: boolean; } | null; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static NumberOfWaterAccounts = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static GeographyUser = (value: FormControlState<Array<GeographyUserSimpleDto>> | Array<GeographyUserSimpleDto> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<GeographyUserSimpleDto>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ScenarioPlannerRoleID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ScenarioPlannerRoleDisplayName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Models = (value: FormControlState<Array<ModelSimpleDto>> | Array<ModelSimpleDto> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<ModelSimpleDto>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ScenarioPlannerRights = (value: FormControlState<{ [key: string]: Rights; }> | { [key: string]: Rights; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: Rights; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static GETRunCustomerID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static GETRunUserID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { MLRPIncentiveDto } from './mlrp-incentive-dto';
import { WaterAccountMinimalDto } from './water-account-minimal-dto';
import { FeeCalculatorOutputDto } from './fee-calculator-output-dto';
import { FeeStructureDto } from './fee-structure-dto';
import { GeographyPublicDto } from './geography-public-dto';
import { ReportingPeriodDto } from './reporting-period-dto';
import { FeeCalculatorInputDto } from './fee-calculator-input-dto';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class FeeCalculatorInputOptionsDto { 
    Geography?: GeographyPublicDto;
    readonly FilterGridToWaterMeasurementTypeIDs?: Array<number> | null;
    WaterAccounts?: Array<WaterAccountMinimalDto> | null;
    ReportingPeriods?: Array<ReportingPeriodDto> | null;
    FeeStructures?: Array<FeeStructureDto> | null;
    MLRPIncentives?: Array<MLRPIncentiveDto> | null;
    InitialInputs?: FeeCalculatorInputDto;
    InitialOutput?: FeeCalculatorOutputDto;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface FeeCalculatorInputOptionsDtoForm { 
    Geography?: FormControl<GeographyPublicDto>;
    FilterGridToWaterMeasurementTypeIDs?: FormControl<Array<number>>;
    WaterAccounts?: FormControl<Array<WaterAccountMinimalDto>>;
    ReportingPeriods?: FormControl<Array<ReportingPeriodDto>>;
    FeeStructures?: FormControl<Array<FeeStructureDto>>;
    MLRPIncentives?: FormControl<Array<MLRPIncentiveDto>>;
    InitialInputs?: FormControl<FeeCalculatorInputDto>;
    InitialOutput?: FormControl<FeeCalculatorOutputDto>;
}

export class FeeCalculatorInputOptionsDtoFormControls { 
    public static Geography = (value: FormControlState<GeographyPublicDto> | GeographyPublicDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<GeographyPublicDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FilterGridToWaterMeasurementTypeIDs = (value: FormControlState<Array<number>> | Array<number> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<number>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterAccounts = (value: FormControlState<Array<WaterAccountMinimalDto>> | Array<WaterAccountMinimalDto> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<WaterAccountMinimalDto>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ReportingPeriods = (value: FormControlState<Array<ReportingPeriodDto>> | Array<ReportingPeriodDto> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<ReportingPeriodDto>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FeeStructures = (value: FormControlState<Array<FeeStructureDto>> | Array<FeeStructureDto> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<FeeStructureDto>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static MLRPIncentives = (value: FormControlState<Array<MLRPIncentiveDto>> | Array<MLRPIncentiveDto> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<MLRPIncentiveDto>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static InitialInputs = (value: FormControlState<FeeCalculatorInputDto> | FeeCalculatorInputDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<FeeCalculatorInputDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static InitialOutput = (value: FormControlState<FeeCalculatorOutputDto> | FeeCalculatorOutputDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<FeeCalculatorOutputDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

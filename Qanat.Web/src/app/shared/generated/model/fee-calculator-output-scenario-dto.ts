/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { FeeCategoryOutputDto } from './fee-category-output-dto';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class FeeCalculatorOutputScenarioDto { 
    EstimatedFeeTotal?: number | null;
    EstimatedFeePerAcreFoot?: number | null;
    EstimatedFeePerParcelAcre?: number | null;
    EstimatedFeePerIrrigatedAcre?: number | null;
    Acres?: number | null;
    IrrigatedAcres?: number | null;
    TransitionedAcres?: number | null;
    EstimatedConsumedGroundwaterInAcreFeetByParcelAcres?: number | null;
    EstimatedConsumedGroundwaterInAcreFeetByIrrigatedAcres?: number | null;
    TotalAllocationInAcreFeet?: number | null;
    TotalAllocationInAcreFeetByAcre?: number | null;
    TotalRemainingAllocationInAcreFeet?: number | null;
    TotalRemainingGroundwaterConsumption?: number | null;
    TotalETInAcreFeet?: number | null;
    TotalPrecipInAcreFeet?: number | null;
    SurfaceWaterConsumedInAcreFeet?: number | null;
    TotalAnnualConsumedGroundwaterInAcreFeet?: number | null;
    CategoryBreakdown?: Array<FeeCategoryOutputDto> | null;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface FeeCalculatorOutputScenarioDtoForm { 
    EstimatedFeeTotal?: FormControl<number>;
    EstimatedFeePerAcreFoot?: FormControl<number>;
    EstimatedFeePerParcelAcre?: FormControl<number>;
    EstimatedFeePerIrrigatedAcre?: FormControl<number>;
    Acres?: FormControl<number>;
    IrrigatedAcres?: FormControl<number>;
    TransitionedAcres?: FormControl<number>;
    EstimatedConsumedGroundwaterInAcreFeetByParcelAcres?: FormControl<number>;
    EstimatedConsumedGroundwaterInAcreFeetByIrrigatedAcres?: FormControl<number>;
    TotalAllocationInAcreFeet?: FormControl<number>;
    TotalAllocationInAcreFeetByAcre?: FormControl<number>;
    TotalRemainingAllocationInAcreFeet?: FormControl<number>;
    TotalRemainingGroundwaterConsumption?: FormControl<number>;
    TotalETInAcreFeet?: FormControl<number>;
    TotalPrecipInAcreFeet?: FormControl<number>;
    SurfaceWaterConsumedInAcreFeet?: FormControl<number>;
    TotalAnnualConsumedGroundwaterInAcreFeet?: FormControl<number>;
    CategoryBreakdown?: FormControl<Array<FeeCategoryOutputDto>>;
}

export class FeeCalculatorOutputScenarioDtoFormControls { 
    public static EstimatedFeeTotal = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static EstimatedFeePerAcreFoot = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static EstimatedFeePerParcelAcre = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static EstimatedFeePerIrrigatedAcre = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Acres = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static IrrigatedAcres = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TransitionedAcres = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static EstimatedConsumedGroundwaterInAcreFeetByParcelAcres = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static EstimatedConsumedGroundwaterInAcreFeetByIrrigatedAcres = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalAllocationInAcreFeet = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalAllocationInAcreFeetByAcre = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalRemainingAllocationInAcreFeet = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalRemainingGroundwaterConsumption = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalETInAcreFeet = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalPrecipInAcreFeet = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static SurfaceWaterConsumedInAcreFeet = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalAnnualConsumedGroundwaterInAcreFeet = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CategoryBreakdown = (value: FormControlState<Array<FeeCategoryOutputDto>> | Array<FeeCategoryOutputDto> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<FeeCategoryOutputDto>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

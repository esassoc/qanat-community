/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { UnitOfMeasure } from './unit-of-measure';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class DecimalType { 
    readonly Type?: string | null;
    Nullable: boolean;
    Precision: number;
    Scale: number;
    MinValue?: number | null;
    MaxValue?: number | null;
    UnitOfMeasure?: UnitOfMeasure;
    DefaultValue?: number | null;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface DecimalTypeForm { 
    Type?: FormControl<string>;
    Nullable: FormControl<boolean>;
    Precision: FormControl<number>;
    Scale: FormControl<number>;
    MinValue?: FormControl<number>;
    MaxValue?: FormControl<number>;
    UnitOfMeasure?: FormControl<UnitOfMeasure>;
    DefaultValue?: FormControl<number>;
}

export class DecimalTypeFormControls { 
    public static Type = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Nullable = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
            ],
        }
    );
    public static Precision = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
                Validators.min(1),
                Validators.max(2147483647),
            ],
        }
    );
    public static Scale = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: true,
            validators: 
            [
                Validators.required,
                Validators.min(1),
                Validators.max(2147483647),
            ],
        }
    );
    public static MinValue = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static MaxValue = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UnitOfMeasure = (value: FormControlState<UnitOfMeasure> | UnitOfMeasure = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<UnitOfMeasure>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static DefaultValue = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

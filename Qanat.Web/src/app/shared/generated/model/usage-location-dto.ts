/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { GeographySimpleDto } from './geography-simple-dto';
import { UsageLocationTypeSimpleDto } from './usage-location-type-simple-dto';
import { ParcelSimpleDto } from './parcel-simple-dto';
import { WaterAccountSimpleDto } from './water-account-simple-dto';
import { UserSimpleDto } from './user-simple-dto';
import { ReportingPeriodSimpleDto } from './reporting-period-simple-dto';
import { UsageLocationCropSimpleDto } from './usage-location-crop-simple-dto';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class UsageLocationDto { 
    UsageLocationID?: number;
    Geography?: GeographySimpleDto;
    UsageLocationType?: UsageLocationTypeSimpleDto;
    WaterAccount?: WaterAccountSimpleDto;
    Parcel?: ParcelSimpleDto;
    ReportingPeriod?: ReportingPeriodSimpleDto;
    Name?: string | null;
    Area?: number;
    FallowStatus?: string | null;
    FallowSelfReportApproved?: boolean;
    FallowNote?: string | null;
    CoverCropStatus?: string | null;
    CoverCropSelfReportApproved?: boolean;
    CoverCropNote?: string | null;
    Crops?: Array<UsageLocationCropSimpleDto> | null;
    SourceOfRecordWaterMeasurementTypeName?: string | null;
    SourceOfRecordValueInAcreFeet?: number | null;
    SourceOfRecordValueInFeet?: number | null;
    CreateDate?: string;
    CreateUser?: UserSimpleDto;
    UpdateDate?: string | null;
    UpdateUser?: UserSimpleDto;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface UsageLocationDtoForm { 
    UsageLocationID?: FormControl<number>;
    Geography?: FormControl<GeographySimpleDto>;
    UsageLocationType?: FormControl<UsageLocationTypeSimpleDto>;
    WaterAccount?: FormControl<WaterAccountSimpleDto>;
    Parcel?: FormControl<ParcelSimpleDto>;
    ReportingPeriod?: FormControl<ReportingPeriodSimpleDto>;
    Name?: FormControl<string>;
    Area?: FormControl<number>;
    FallowStatus?: FormControl<string>;
    FallowSelfReportApproved?: FormControl<boolean>;
    FallowNote?: FormControl<string>;
    CoverCropStatus?: FormControl<string>;
    CoverCropSelfReportApproved?: FormControl<boolean>;
    CoverCropNote?: FormControl<string>;
    Crops?: FormControl<Array<UsageLocationCropSimpleDto>>;
    SourceOfRecordWaterMeasurementTypeName?: FormControl<string>;
    SourceOfRecordValueInAcreFeet?: FormControl<number>;
    SourceOfRecordValueInFeet?: FormControl<number>;
    CreateDate?: FormControl<string>;
    CreateUser?: FormControl<UserSimpleDto>;
    UpdateDate?: FormControl<string>;
    UpdateUser?: FormControl<UserSimpleDto>;
}

export class UsageLocationDtoFormControls { 
    public static UsageLocationID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Geography = (value: FormControlState<GeographySimpleDto> | GeographySimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<GeographySimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UsageLocationType = (value: FormControlState<UsageLocationTypeSimpleDto> | UsageLocationTypeSimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<UsageLocationTypeSimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterAccount = (value: FormControlState<WaterAccountSimpleDto> | WaterAccountSimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<WaterAccountSimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Parcel = (value: FormControlState<ParcelSimpleDto> | ParcelSimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<ParcelSimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ReportingPeriod = (value: FormControlState<ReportingPeriodSimpleDto> | ReportingPeriodSimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<ReportingPeriodSimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Name = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Area = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FallowStatus = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FallowSelfReportApproved = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FallowNote = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CoverCropStatus = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CoverCropSelfReportApproved = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CoverCropNote = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Crops = (value: FormControlState<Array<UsageLocationCropSimpleDto>> | Array<UsageLocationCropSimpleDto> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<UsageLocationCropSimpleDto>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static SourceOfRecordWaterMeasurementTypeName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static SourceOfRecordValueInAcreFeet = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static SourceOfRecordValueInFeet = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CreateDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CreateUser = (value: FormControlState<UserSimpleDto> | UserSimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<UserSimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UpdateDate = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UpdateUser = (value: FormControlState<UserSimpleDto> | UserSimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<UserSimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

/**
 * Qanat.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class WaterAccountWaterTypeMonthlySupplyDto { 
    WaterAccountID?: number;
    WaterTypeID?: number;
    WaterTypeName?: string;
    WaterTypeColor?: string;
    WaterTypeSortOrder?: number;
    TotalSupply?: number;
    CumulativeSupplyByMonth?: { [key: string]: number; };
    CumulativeSupplyDepthByMonth?: { [key: string]: number; };
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface WaterAccountWaterTypeMonthlySupplyDtoForm { 
    WaterAccountID?: FormControl<number>;
    WaterTypeID?: FormControl<number>;
    WaterTypeName?: FormControl<string>;
    WaterTypeColor?: FormControl<string>;
    WaterTypeSortOrder?: FormControl<number>;
    TotalSupply?: FormControl<number>;
    CumulativeSupplyByMonth?: FormControl<{ [key: string]: number; }>;
    CumulativeSupplyDepthByMonth?: FormControl<{ [key: string]: number; }>;
}

export class WaterAccountWaterTypeMonthlySupplyDtoFormControls { 
    public static WaterAccountID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterTypeID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterTypeName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterTypeColor = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static WaterTypeSortOrder = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static TotalSupply = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CumulativeSupplyByMonth = (value: FormControlState<{ [key: string]: number; }> | { [key: string]: number; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: number; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CumulativeSupplyDepthByMonth = (value: FormControlState<{ [key: string]: number; }> | { [key: string]: number; } = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<{ [key: string]: number; }>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}

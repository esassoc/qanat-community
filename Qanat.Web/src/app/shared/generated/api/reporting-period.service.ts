/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ReportingPeriodCoverCropSelfReportMetadataUpdateDto } from '../model/reporting-period-cover-crop-self-report-metadata-update-dto';
// @ts-ignore
import { ReportingPeriodDto } from '../model/reporting-period-dto';
// @ts-ignore
import { ReportingPeriodFallowSelfReportMetadataUpdateDto } from '../model/reporting-period-fallow-self-report-metadata-update-dto';
// @ts-ignore
import { ReportingPeriodUpsertDto } from '../model/reporting-period-upsert-dto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class ReportingPeriodService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param geographyID 
     * @param reportingPeriodUpsertDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createReportingPeriod(geographyID: number, reportingPeriodUpsertDto?: ReportingPeriodUpsertDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<ReportingPeriodDto>;
    public createReportingPeriod(geographyID: number, reportingPeriodUpsertDto?: ReportingPeriodUpsertDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ReportingPeriodDto>>;
    public createReportingPeriod(geographyID: number, reportingPeriodUpsertDto?: ReportingPeriodUpsertDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ReportingPeriodDto>>;
    public createReportingPeriod(geographyID: number, reportingPeriodUpsertDto?: ReportingPeriodUpsertDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling createReportingPeriod.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/reporting-periods`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<ReportingPeriodDto>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: reportingPeriodUpsertDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listByGeographyIDReportingPeriod(geographyID: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<ReportingPeriodDto>>;
    public listByGeographyIDReportingPeriod(geographyID: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<ReportingPeriodDto>>>;
    public listByGeographyIDReportingPeriod(geographyID: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<ReportingPeriodDto>>>;
    public listByGeographyIDReportingPeriod(geographyID: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling listByGeographyIDReportingPeriod.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/reporting-periods`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<ReportingPeriodDto>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param reportingPeriodID 
     * @param reportingPeriodCoverCropSelfReportMetadataUpdateDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCoverCropSelfReportMetadataReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodCoverCropSelfReportMetadataUpdateDto?: ReportingPeriodCoverCropSelfReportMetadataUpdateDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<ReportingPeriodDto>;
    public updateCoverCropSelfReportMetadataReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodCoverCropSelfReportMetadataUpdateDto?: ReportingPeriodCoverCropSelfReportMetadataUpdateDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ReportingPeriodDto>>;
    public updateCoverCropSelfReportMetadataReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodCoverCropSelfReportMetadataUpdateDto?: ReportingPeriodCoverCropSelfReportMetadataUpdateDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ReportingPeriodDto>>;
    public updateCoverCropSelfReportMetadataReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodCoverCropSelfReportMetadataUpdateDto?: ReportingPeriodCoverCropSelfReportMetadataUpdateDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling updateCoverCropSelfReportMetadataReportingPeriod.');
        }
        if (reportingPeriodID === null || reportingPeriodID === undefined) {
            throw new Error('Required parameter reportingPeriodID was null or undefined when calling updateCoverCropSelfReportMetadataReportingPeriod.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/reporting-periods/${this.configuration.encodeParam({name: "reportingPeriodID", value: reportingPeriodID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/cover-crop-self-report`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<ReportingPeriodDto>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: reportingPeriodCoverCropSelfReportMetadataUpdateDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param reportingPeriodID 
     * @param reportingPeriodFallowSelfReportMetadataUpdateDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateFallowSelfReportMetadataReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodFallowSelfReportMetadataUpdateDto?: ReportingPeriodFallowSelfReportMetadataUpdateDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<ReportingPeriodDto>;
    public updateFallowSelfReportMetadataReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodFallowSelfReportMetadataUpdateDto?: ReportingPeriodFallowSelfReportMetadataUpdateDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ReportingPeriodDto>>;
    public updateFallowSelfReportMetadataReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodFallowSelfReportMetadataUpdateDto?: ReportingPeriodFallowSelfReportMetadataUpdateDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ReportingPeriodDto>>;
    public updateFallowSelfReportMetadataReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodFallowSelfReportMetadataUpdateDto?: ReportingPeriodFallowSelfReportMetadataUpdateDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling updateFallowSelfReportMetadataReportingPeriod.');
        }
        if (reportingPeriodID === null || reportingPeriodID === undefined) {
            throw new Error('Required parameter reportingPeriodID was null or undefined when calling updateFallowSelfReportMetadataReportingPeriod.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/reporting-periods/${this.configuration.encodeParam({name: "reportingPeriodID", value: reportingPeriodID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/fallow-self-report`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<ReportingPeriodDto>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: reportingPeriodFallowSelfReportMetadataUpdateDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param reportingPeriodID 
     * @param reportingPeriodUpsertDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodUpsertDto?: ReportingPeriodUpsertDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<ReportingPeriodDto>;
    public updateReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodUpsertDto?: ReportingPeriodUpsertDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ReportingPeriodDto>>;
    public updateReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodUpsertDto?: ReportingPeriodUpsertDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ReportingPeriodDto>>;
    public updateReportingPeriod(geographyID: number, reportingPeriodID: number, reportingPeriodUpsertDto?: ReportingPeriodUpsertDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling updateReportingPeriod.');
        }
        if (reportingPeriodID === null || reportingPeriodID === undefined) {
            throw new Error('Required parameter reportingPeriodID was null or undefined when calling updateReportingPeriod.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/reporting-periods/${this.configuration.encodeParam({name: "reportingPeriodID", value: reportingPeriodID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<ReportingPeriodDto>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: reportingPeriodUpsertDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}

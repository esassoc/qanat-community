/**
 * Qanat.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { GETActionDto } from '../model/get-action-dto';
import { ModelBoundaryDto } from '../model/model-boundary-dto';
import { ModelSimpleDto } from '../model/model-simple-dto';
import { ScenarioSimpleDto } from '../model/scenario-simple-dto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { catchError } from 'rxjs/operators';
import { ApiService } from '../../services';


@Injectable({
  providedIn: 'root'
})
export class ModelService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration
    , private apiService: ApiService) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modelsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<ModelSimpleDto>>;
    public modelsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ModelSimpleDto>>>;
    public modelsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ModelSimpleDto>>>;
    public modelsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ModelSimpleDto>>(`${this.basePath}/models`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param modelID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modelsModelIDImageGet(modelID: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public modelsModelIDImageGet(modelID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public modelsModelIDImageGet(modelID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public modelsModelIDImageGet(modelID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (modelID === null || modelID === undefined) {
            throw new Error('Required parameter modelID was null or undefined when calling modelsModelIDImageGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/models/${encodeURIComponent(String(modelID))}/image`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param modelShortName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modelsModelShortNameActionsGet(modelShortName: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GETActionDto>>;
    public modelsModelShortNameActionsGet(modelShortName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GETActionDto>>>;
    public modelsModelShortNameActionsGet(modelShortName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GETActionDto>>>;
    public modelsModelShortNameActionsGet(modelShortName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (modelShortName === null || modelShortName === undefined) {
            throw new Error('Required parameter modelShortName was null or undefined when calling modelsModelShortNameActionsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<GETActionDto>>(`${this.basePath}/models/${encodeURIComponent(String(modelShortName))}/actions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param modelShortName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modelsModelShortNameBoundaryGet(modelShortName: string, observe?: 'body', reportProgress?: boolean): Observable<ModelBoundaryDto>;
    public modelsModelShortNameBoundaryGet(modelShortName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelBoundaryDto>>;
    public modelsModelShortNameBoundaryGet(modelShortName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelBoundaryDto>>;
    public modelsModelShortNameBoundaryGet(modelShortName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (modelShortName === null || modelShortName === undefined) {
            throw new Error('Required parameter modelShortName was null or undefined when calling modelsModelShortNameBoundaryGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ModelBoundaryDto>(`${this.basePath}/models/${encodeURIComponent(String(modelShortName))}/boundary`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param modelShortName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modelsModelShortNameGet(modelShortName: string, observe?: 'body', reportProgress?: boolean): Observable<ModelSimpleDto>;
    public modelsModelShortNameGet(modelShortName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelSimpleDto>>;
    public modelsModelShortNameGet(modelShortName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelSimpleDto>>;
    public modelsModelShortNameGet(modelShortName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (modelShortName === null || modelShortName === undefined) {
            throw new Error('Required parameter modelShortName was null or undefined when calling modelsModelShortNameGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ModelSimpleDto>(`${this.basePath}/models/${encodeURIComponent(String(modelShortName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param modelShortName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modelsModelShortNameScenariosGet(modelShortName: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ScenarioSimpleDto>>;
    public modelsModelShortNameScenariosGet(modelShortName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ScenarioSimpleDto>>>;
    public modelsModelShortNameScenariosGet(modelShortName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ScenarioSimpleDto>>>;
    public modelsModelShortNameScenariosGet(modelShortName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (modelShortName === null || modelShortName === undefined) {
            throw new Error('Required parameter modelShortName was null or undefined when calling modelsModelShortNameScenariosGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ScenarioSimpleDto>>(`${this.basePath}/models/${encodeURIComponent(String(modelShortName))}/scenarios`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

}

/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { MeterReadingDto } from '../model/meter-reading-dto';
// @ts-ignore
import { MeterReadingUpsertDto } from '../model/meter-reading-upsert-dto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class MeterReadingByMeterService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param geographyID 
     * @param wellID 
     * @param meterID 
     * @param meterReadingUpsertDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createMeterReadingMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingUpsertDto?: MeterReadingUpsertDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<MeterReadingDto>;
    public createMeterReadingMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingUpsertDto?: MeterReadingUpsertDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<MeterReadingDto>>;
    public createMeterReadingMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingUpsertDto?: MeterReadingUpsertDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<MeterReadingDto>>;
    public createMeterReadingMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingUpsertDto?: MeterReadingUpsertDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling createMeterReadingMeterReadingByMeter.');
        }
        if (wellID === null || wellID === undefined) {
            throw new Error('Required parameter wellID was null or undefined when calling createMeterReadingMeterReadingByMeter.');
        }
        if (meterID === null || meterID === undefined) {
            throw new Error('Required parameter meterID was null or undefined when calling createMeterReadingMeterReadingByMeter.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/wells/${this.configuration.encodeParam({name: "wellID", value: wellID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/meters/${this.configuration.encodeParam({name: "meterID", value: meterID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/meter-readings`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<MeterReadingDto>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: meterReadingUpsertDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param wellID 
     * @param meterID 
     * @param dateAsString 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLastReadingFromDateMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, dateAsString: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<MeterReadingDto>;
    public getLastReadingFromDateMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, dateAsString: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<MeterReadingDto>>;
    public getLastReadingFromDateMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, dateAsString: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<MeterReadingDto>>;
    public getLastReadingFromDateMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, dateAsString: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling getLastReadingFromDateMeterReadingByMeter.');
        }
        if (wellID === null || wellID === undefined) {
            throw new Error('Required parameter wellID was null or undefined when calling getLastReadingFromDateMeterReadingByMeter.');
        }
        if (meterID === null || meterID === undefined) {
            throw new Error('Required parameter meterID was null or undefined when calling getLastReadingFromDateMeterReadingByMeter.');
        }
        if (dateAsString === null || dateAsString === undefined) {
            throw new Error('Required parameter dateAsString was null or undefined when calling getLastReadingFromDateMeterReadingByMeter.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/wells/${this.configuration.encodeParam({name: "wellID", value: wellID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/meters/${this.configuration.encodeParam({name: "meterID", value: meterID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/meter-readings/last-reading/${this.configuration.encodeParam({name: "dateAsString", value: dateAsString, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<MeterReadingDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param wellID 
     * @param meterID 
     * @param meterReadingID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMeterReadingByIDMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingID: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<MeterReadingDto>;
    public getMeterReadingByIDMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingID: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<MeterReadingDto>>;
    public getMeterReadingByIDMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingID: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<MeterReadingDto>>;
    public getMeterReadingByIDMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingID: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling getMeterReadingByIDMeterReadingByMeter.');
        }
        if (wellID === null || wellID === undefined) {
            throw new Error('Required parameter wellID was null or undefined when calling getMeterReadingByIDMeterReadingByMeter.');
        }
        if (meterID === null || meterID === undefined) {
            throw new Error('Required parameter meterID was null or undefined when calling getMeterReadingByIDMeterReadingByMeter.');
        }
        if (meterReadingID === null || meterReadingID === undefined) {
            throw new Error('Required parameter meterReadingID was null or undefined when calling getMeterReadingByIDMeterReadingByMeter.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/wells/${this.configuration.encodeParam({name: "wellID", value: wellID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/meters/${this.configuration.encodeParam({name: "meterID", value: meterID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/meter-readings/${this.configuration.encodeParam({name: "meterReadingID", value: meterReadingID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<MeterReadingDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param wellID 
     * @param meterID 
     * @param meterReadingID 
     * @param meterReadingUpsertDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateWellMeterReadingMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingID: number, meterReadingUpsertDto?: MeterReadingUpsertDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<MeterReadingDto>;
    public updateWellMeterReadingMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingID: number, meterReadingUpsertDto?: MeterReadingUpsertDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<MeterReadingDto>>;
    public updateWellMeterReadingMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingID: number, meterReadingUpsertDto?: MeterReadingUpsertDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<MeterReadingDto>>;
    public updateWellMeterReadingMeterReadingByMeter(geographyID: number, wellID: number, meterID: number, meterReadingID: number, meterReadingUpsertDto?: MeterReadingUpsertDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling updateWellMeterReadingMeterReadingByMeter.');
        }
        if (wellID === null || wellID === undefined) {
            throw new Error('Required parameter wellID was null or undefined when calling updateWellMeterReadingMeterReadingByMeter.');
        }
        if (meterID === null || meterID === undefined) {
            throw new Error('Required parameter meterID was null or undefined when calling updateWellMeterReadingMeterReadingByMeter.');
        }
        if (meterReadingID === null || meterReadingID === undefined) {
            throw new Error('Required parameter meterReadingID was null or undefined when calling updateWellMeterReadingMeterReadingByMeter.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/wells/${this.configuration.encodeParam({name: "wellID", value: wellID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/meters/${this.configuration.encodeParam({name: "meterID", value: meterID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/meter-readings/${this.configuration.encodeParam({name: "meterReadingID", value: meterReadingID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<MeterReadingDto>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: meterReadingUpsertDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}

/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ParcelWaterMeasurementChartDatumDto } from '../model/parcel-water-measurement-chart-datum-dto';
// @ts-ignore
import { RefreshWaterMeasurementCalculationsDto } from '../model/refresh-water-measurement-calculations-dto';
// @ts-ignore
import { WaterMeasurementBulkSetDto } from '../model/water-measurement-bulk-set-dto';
// @ts-ignore
import { WaterMeasurementQualityAssuranceDto } from '../model/water-measurement-quality-assurance-dto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class WaterMeasurementService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param geographyID 
     * @param waterMeasurementBulkSetDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bulkSetWaterMeasurementsWaterMeasurement(geographyID: number, waterMeasurementBulkSetDto?: WaterMeasurementBulkSetDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public bulkSetWaterMeasurementsWaterMeasurement(geographyID: number, waterMeasurementBulkSetDto?: WaterMeasurementBulkSetDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public bulkSetWaterMeasurementsWaterMeasurement(geographyID: number, waterMeasurementBulkSetDto?: WaterMeasurementBulkSetDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public bulkSetWaterMeasurementsWaterMeasurement(geographyID: number, waterMeasurementBulkSetDto?: WaterMeasurementBulkSetDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling bulkSetWaterMeasurementsWaterMeasurement.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/water-measurements/bulk-set`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: waterMeasurementBulkSetDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param year 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadExcelWorkbookForGeographyAndYearWaterMeasurement(geographyID: number, year: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<Blob>;
    public downloadExcelWorkbookForGeographyAndYearWaterMeasurement(geographyID: number, year: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Blob>>;
    public downloadExcelWorkbookForGeographyAndYearWaterMeasurement(geographyID: number, year: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Blob>>;
    public downloadExcelWorkbookForGeographyAndYearWaterMeasurement(geographyID: number, year: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling downloadExcelWorkbookForGeographyAndYearWaterMeasurement.');
        }
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling downloadExcelWorkbookForGeographyAndYearWaterMeasurement.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/water-measurements/years/${this.configuration.encodeParam({name: "year", value: year, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/excel-download`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: "blob",
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param reportingPeriodID 
     * @param waterMeasurementTypeID 
     * @param months 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listByGeographyIDReportingPeriodIDWaterMeasurementTypeIDAndMonthsWaterMeasurement(geographyID: number, reportingPeriodID: number, waterMeasurementTypeID: number, months?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<WaterMeasurementQualityAssuranceDto>>;
    public listByGeographyIDReportingPeriodIDWaterMeasurementTypeIDAndMonthsWaterMeasurement(geographyID: number, reportingPeriodID: number, waterMeasurementTypeID: number, months?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<WaterMeasurementQualityAssuranceDto>>>;
    public listByGeographyIDReportingPeriodIDWaterMeasurementTypeIDAndMonthsWaterMeasurement(geographyID: number, reportingPeriodID: number, waterMeasurementTypeID: number, months?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<WaterMeasurementQualityAssuranceDto>>>;
    public listByGeographyIDReportingPeriodIDWaterMeasurementTypeIDAndMonthsWaterMeasurement(geographyID: number, reportingPeriodID: number, waterMeasurementTypeID: number, months?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling listByGeographyIDReportingPeriodIDWaterMeasurementTypeIDAndMonthsWaterMeasurement.');
        }
        if (reportingPeriodID === null || reportingPeriodID === undefined) {
            throw new Error('Required parameter reportingPeriodID was null or undefined when calling listByGeographyIDReportingPeriodIDWaterMeasurementTypeIDAndMonthsWaterMeasurement.');
        }
        if (waterMeasurementTypeID === null || waterMeasurementTypeID === undefined) {
            throw new Error('Required parameter waterMeasurementTypeID was null or undefined when calling listByGeographyIDReportingPeriodIDWaterMeasurementTypeIDAndMonthsWaterMeasurement.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (months) {
            months.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'months');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/water-measurements/reporting-periods/${this.configuration.encodeParam({name: "reportingPeriodID", value: reportingPeriodID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/water-measurement-types/${this.configuration.encodeParam({name: "waterMeasurementTypeID", value: waterMeasurementTypeID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<WaterMeasurementQualityAssuranceDto>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param uploadedFile 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listCSVHeadersWaterMeasurement(geographyID: number, uploadedFile: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public listCSVHeadersWaterMeasurement(geographyID: number, uploadedFile: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public listCSVHeadersWaterMeasurement(geographyID: number, uploadedFile: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public listCSVHeadersWaterMeasurement(geographyID: number, uploadedFile: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling listCSVHeadersWaterMeasurement.');
        }
        if (uploadedFile === null || uploadedFile === undefined) {
            throw new Error('Required parameter uploadedFile was null or undefined when calling listCSVHeadersWaterMeasurement.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (uploadedFile !== undefined) {
            localVarFormParams = localVarFormParams.append('UploadedFile', <any>uploadedFile) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/water-measurements/csv-headers`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param parcelID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listWaterMeasurementChartDataForParcelWaterMeasurement(geographyID: number, parcelID: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<ParcelWaterMeasurementChartDatumDto>>;
    public listWaterMeasurementChartDataForParcelWaterMeasurement(geographyID: number, parcelID: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<ParcelWaterMeasurementChartDatumDto>>>;
    public listWaterMeasurementChartDataForParcelWaterMeasurement(geographyID: number, parcelID: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<ParcelWaterMeasurementChartDatumDto>>>;
    public listWaterMeasurementChartDataForParcelWaterMeasurement(geographyID: number, parcelID: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling listWaterMeasurementChartDataForParcelWaterMeasurement.');
        }
        if (parcelID === null || parcelID === undefined) {
            throw new Error('Required parameter parcelID was null or undefined when calling listWaterMeasurementChartDataForParcelWaterMeasurement.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/water-measurements/parcels/${this.configuration.encodeParam({name: "parcelID", value: parcelID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/chart-data`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<ParcelWaterMeasurementChartDatumDto>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param parcelID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listWaterMeasurementsForParcelWaterMeasurement(geographyID: number, parcelID: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<Blob>;
    public listWaterMeasurementsForParcelWaterMeasurement(geographyID: number, parcelID: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Blob>>;
    public listWaterMeasurementsForParcelWaterMeasurement(geographyID: number, parcelID: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Blob>>;
    public listWaterMeasurementsForParcelWaterMeasurement(geographyID: number, parcelID: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling listWaterMeasurementsForParcelWaterMeasurement.');
        }
        if (parcelID === null || parcelID === undefined) {
            throw new Error('Required parameter parcelID was null or undefined when calling listWaterMeasurementsForParcelWaterMeasurement.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/water-measurements/parcels/${this.configuration.encodeParam({name: "parcelID", value: parcelID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/excel-download`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: "blob",
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param uploadedFile 
     * @param effectiveDate 
     * @param waterMeasurementTypeID 
     * @param unitTypeID 
     * @param aPNColumnName 
     * @param quantityColumnName 
     * @param commentColumnName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public newCSVUploadWaterMeasurement(geographyID: number, uploadedFile: Blob, effectiveDate: string, waterMeasurementTypeID: number, unitTypeID: number, aPNColumnName: string, quantityColumnName: string, commentColumnName?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public newCSVUploadWaterMeasurement(geographyID: number, uploadedFile: Blob, effectiveDate: string, waterMeasurementTypeID: number, unitTypeID: number, aPNColumnName: string, quantityColumnName: string, commentColumnName?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public newCSVUploadWaterMeasurement(geographyID: number, uploadedFile: Blob, effectiveDate: string, waterMeasurementTypeID: number, unitTypeID: number, aPNColumnName: string, quantityColumnName: string, commentColumnName?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public newCSVUploadWaterMeasurement(geographyID: number, uploadedFile: Blob, effectiveDate: string, waterMeasurementTypeID: number, unitTypeID: number, aPNColumnName: string, quantityColumnName: string, commentColumnName?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling newCSVUploadWaterMeasurement.');
        }
        if (uploadedFile === null || uploadedFile === undefined) {
            throw new Error('Required parameter uploadedFile was null or undefined when calling newCSVUploadWaterMeasurement.');
        }
        if (effectiveDate === null || effectiveDate === undefined) {
            throw new Error('Required parameter effectiveDate was null or undefined when calling newCSVUploadWaterMeasurement.');
        }
        if (waterMeasurementTypeID === null || waterMeasurementTypeID === undefined) {
            throw new Error('Required parameter waterMeasurementTypeID was null or undefined when calling newCSVUploadWaterMeasurement.');
        }
        if (unitTypeID === null || unitTypeID === undefined) {
            throw new Error('Required parameter unitTypeID was null or undefined when calling newCSVUploadWaterMeasurement.');
        }
        if (aPNColumnName === null || aPNColumnName === undefined) {
            throw new Error('Required parameter aPNColumnName was null or undefined when calling newCSVUploadWaterMeasurement.');
        }
        if (quantityColumnName === null || quantityColumnName === undefined) {
            throw new Error('Required parameter quantityColumnName was null or undefined when calling newCSVUploadWaterMeasurement.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (uploadedFile !== undefined) {
            localVarFormParams = localVarFormParams.append('UploadedFile', <any>uploadedFile) as any || localVarFormParams;
        }
        if (effectiveDate !== undefined) {
            localVarFormParams = localVarFormParams.append('EffectiveDate', <any>effectiveDate) as any || localVarFormParams;
        }
        if (waterMeasurementTypeID !== undefined) {
            localVarFormParams = localVarFormParams.append('WaterMeasurementTypeID', <any>waterMeasurementTypeID) as any || localVarFormParams;
        }
        if (unitTypeID !== undefined) {
            localVarFormParams = localVarFormParams.append('UnitTypeID', <any>unitTypeID) as any || localVarFormParams;
        }
        if (aPNColumnName !== undefined) {
            localVarFormParams = localVarFormParams.append('APNColumnName', <any>aPNColumnName) as any || localVarFormParams;
        }
        if (quantityColumnName !== undefined) {
            localVarFormParams = localVarFormParams.append('QuantityColumnName', <any>quantityColumnName) as any || localVarFormParams;
        }
        if (commentColumnName !== undefined) {
            localVarFormParams = localVarFormParams.append('CommentColumnName', <any>commentColumnName) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/water-measurements/csv`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param year 
     * @param month 
     * @param refreshWaterMeasurementCalculationsDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public runAllCalculationsForGeographyWaterMeasurement(geographyID: number, year: number, month: number, refreshWaterMeasurementCalculationsDto?: RefreshWaterMeasurementCalculationsDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public runAllCalculationsForGeographyWaterMeasurement(geographyID: number, year: number, month: number, refreshWaterMeasurementCalculationsDto?: RefreshWaterMeasurementCalculationsDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public runAllCalculationsForGeographyWaterMeasurement(geographyID: number, year: number, month: number, refreshWaterMeasurementCalculationsDto?: RefreshWaterMeasurementCalculationsDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public runAllCalculationsForGeographyWaterMeasurement(geographyID: number, year: number, month: number, refreshWaterMeasurementCalculationsDto?: RefreshWaterMeasurementCalculationsDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling runAllCalculationsForGeographyWaterMeasurement.');
        }
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling runAllCalculationsForGeographyWaterMeasurement.');
        }
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling runAllCalculationsForGeographyWaterMeasurement.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/water-measurements/calculations/years/${this.configuration.encodeParam({name: "year", value: year, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/months/${this.configuration.encodeParam({name: "month", value: month, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: refreshWaterMeasurementCalculationsDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param uploadedFile 
     * @param unitTypeID 
     * @param waterMeasurementTypeID 
     * @param effectiveDate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadRasterWaterMeasurement(geographyID: number, uploadedFile: Blob, unitTypeID: number, waterMeasurementTypeID: number, effectiveDate: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public uploadRasterWaterMeasurement(geographyID: number, uploadedFile: Blob, unitTypeID: number, waterMeasurementTypeID: number, effectiveDate: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public uploadRasterWaterMeasurement(geographyID: number, uploadedFile: Blob, unitTypeID: number, waterMeasurementTypeID: number, effectiveDate: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public uploadRasterWaterMeasurement(geographyID: number, uploadedFile: Blob, unitTypeID: number, waterMeasurementTypeID: number, effectiveDate: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling uploadRasterWaterMeasurement.');
        }
        if (uploadedFile === null || uploadedFile === undefined) {
            throw new Error('Required parameter uploadedFile was null or undefined when calling uploadRasterWaterMeasurement.');
        }
        if (unitTypeID === null || unitTypeID === undefined) {
            throw new Error('Required parameter unitTypeID was null or undefined when calling uploadRasterWaterMeasurement.');
        }
        if (waterMeasurementTypeID === null || waterMeasurementTypeID === undefined) {
            throw new Error('Required parameter waterMeasurementTypeID was null or undefined when calling uploadRasterWaterMeasurement.');
        }
        if (effectiveDate === null || effectiveDate === undefined) {
            throw new Error('Required parameter effectiveDate was null or undefined when calling uploadRasterWaterMeasurement.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (uploadedFile !== undefined) {
            localVarFormParams = localVarFormParams.append('UploadedFile', <any>uploadedFile) as any || localVarFormParams;
        }
        if (unitTypeID !== undefined) {
            localVarFormParams = localVarFormParams.append('UnitTypeID', <any>unitTypeID) as any || localVarFormParams;
        }
        if (waterMeasurementTypeID !== undefined) {
            localVarFormParams = localVarFormParams.append('WaterMeasurementTypeID', <any>waterMeasurementTypeID) as any || localVarFormParams;
        }
        if (effectiveDate !== undefined) {
            localVarFormParams = localVarFormParams.append('EffectiveDate', <any>effectiveDate) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/water-measurements/raster-upload`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}

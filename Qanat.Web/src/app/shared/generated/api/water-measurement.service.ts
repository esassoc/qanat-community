/**
 * Qanat.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ParcelWaterMeasurementChartDatumDto } from '../model/parcel-water-measurement-chart-datum-dto';
import { WaterMeasurementTypeSimpleDto } from '../model/water-measurement-type-simple-dto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { catchError } from 'rxjs/operators';
import { ApiService } from '../../services';


@Injectable({
  providedIn: 'root'
})
export class WaterMeasurementService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration
    , private apiService: ApiService) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param geographyID 
     * @param year 
     * @param month 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public geographiesGeographyIDWaterMeasurementsCalculationsYearsYearMonthsMonthPost(geographyID: number, year: number, month: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public geographiesGeographyIDWaterMeasurementsCalculationsYearsYearMonthsMonthPost(geographyID: number, year: number, month: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public geographiesGeographyIDWaterMeasurementsCalculationsYearsYearMonthsMonthPost(geographyID: number, year: number, month: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public geographiesGeographyIDWaterMeasurementsCalculationsYearsYearMonthsMonthPost(geographyID: number, year: number, month: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling geographiesGeographyIDWaterMeasurementsCalculationsYearsYearMonthsMonthPost.');
        }

        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling geographiesGeographyIDWaterMeasurementsCalculationsYearsYearMonthsMonthPost.');
        }

        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling geographiesGeographyIDWaterMeasurementsCalculationsYearsYearMonthsMonthPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/geographies/${encodeURIComponent(String(geographyID))}/water-measurements/calculations/years/${encodeURIComponent(String(year))}/months/${encodeURIComponent(String(month))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param geographyID 
     * @param uploadedFile 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public geographiesGeographyIDWaterMeasurementsCsvHeadersPost(geographyID: number, uploadedFile: Blob, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public geographiesGeographyIDWaterMeasurementsCsvHeadersPost(geographyID: number, uploadedFile: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public geographiesGeographyIDWaterMeasurementsCsvHeadersPost(geographyID: number, uploadedFile: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public geographiesGeographyIDWaterMeasurementsCsvHeadersPost(geographyID: number, uploadedFile: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling geographiesGeographyIDWaterMeasurementsCsvHeadersPost.');
        }

        if (uploadedFile === null || uploadedFile === undefined) {
            throw new Error('Required parameter uploadedFile was null or undefined when calling geographiesGeographyIDWaterMeasurementsCsvHeadersPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data',
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (uploadedFile !== undefined) {
            formParams = formParams.append('UploadedFile', <any>uploadedFile) || formParams;
        }

        return this.httpClient.post<any>(`${this.basePath}/geographies/${encodeURIComponent(String(geographyID))}/water-measurements/csv-headers`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param geographyID 
     * @param uploadedFile 
     * @param effectiveDate 
     * @param waterMeasurementTypeID 
     * @param unitTypeID 
     * @param aPNColumnName 
     * @param quantityColumnName 
     * @param commentColumnName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public geographiesGeographyIDWaterMeasurementsCsvPost(geographyID: number, uploadedFile: Blob, effectiveDate: string, waterMeasurementTypeID: number, unitTypeID: number, aPNColumnName: string, quantityColumnName: string, commentColumnName?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public geographiesGeographyIDWaterMeasurementsCsvPost(geographyID: number, uploadedFile: Blob, effectiveDate: string, waterMeasurementTypeID: number, unitTypeID: number, aPNColumnName: string, quantityColumnName: string, commentColumnName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public geographiesGeographyIDWaterMeasurementsCsvPost(geographyID: number, uploadedFile: Blob, effectiveDate: string, waterMeasurementTypeID: number, unitTypeID: number, aPNColumnName: string, quantityColumnName: string, commentColumnName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public geographiesGeographyIDWaterMeasurementsCsvPost(geographyID: number, uploadedFile: Blob, effectiveDate: string, waterMeasurementTypeID: number, unitTypeID: number, aPNColumnName: string, quantityColumnName: string, commentColumnName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling geographiesGeographyIDWaterMeasurementsCsvPost.');
        }

        if (uploadedFile === null || uploadedFile === undefined) {
            throw new Error('Required parameter uploadedFile was null or undefined when calling geographiesGeographyIDWaterMeasurementsCsvPost.');
        }

        if (effectiveDate === null || effectiveDate === undefined) {
            throw new Error('Required parameter effectiveDate was null or undefined when calling geographiesGeographyIDWaterMeasurementsCsvPost.');
        }

        if (waterMeasurementTypeID === null || waterMeasurementTypeID === undefined) {
            throw new Error('Required parameter waterMeasurementTypeID was null or undefined when calling geographiesGeographyIDWaterMeasurementsCsvPost.');
        }

        if (unitTypeID === null || unitTypeID === undefined) {
            throw new Error('Required parameter unitTypeID was null or undefined when calling geographiesGeographyIDWaterMeasurementsCsvPost.');
        }

        if (aPNColumnName === null || aPNColumnName === undefined) {
            throw new Error('Required parameter aPNColumnName was null or undefined when calling geographiesGeographyIDWaterMeasurementsCsvPost.');
        }

        if (quantityColumnName === null || quantityColumnName === undefined) {
            throw new Error('Required parameter quantityColumnName was null or undefined when calling geographiesGeographyIDWaterMeasurementsCsvPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data',
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (uploadedFile !== undefined) {
            formParams = formParams.append('UploadedFile', <any>uploadedFile) || formParams;
        }
        if (effectiveDate !== undefined) {
            formParams = formParams.append('EffectiveDate', <any>effectiveDate) || formParams;
        }
        if (waterMeasurementTypeID !== undefined) {
            formParams = formParams.append('WaterMeasurementTypeID', <any>waterMeasurementTypeID) || formParams;
        }
        if (unitTypeID !== undefined) {
            formParams = formParams.append('UnitTypeID', <any>unitTypeID) || formParams;
        }
        if (aPNColumnName !== undefined) {
            formParams = formParams.append('APNColumnName', <any>aPNColumnName) || formParams;
        }
        if (quantityColumnName !== undefined) {
            formParams = formParams.append('QuantityColumnName', <any>quantityColumnName) || formParams;
        }
        if (commentColumnName !== undefined) {
            formParams = formParams.append('CommentColumnName', <any>commentColumnName) || formParams;
        }

        return this.httpClient.post<any>(`${this.basePath}/geographies/${encodeURIComponent(String(geographyID))}/water-measurements/csv`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param geographyID 
     * @param parcelID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public geographiesGeographyIDWaterMeasurementsParcelsParcelIDChartDataGet(geographyID: number, parcelID: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ParcelWaterMeasurementChartDatumDto>>;
    public geographiesGeographyIDWaterMeasurementsParcelsParcelIDChartDataGet(geographyID: number, parcelID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ParcelWaterMeasurementChartDatumDto>>>;
    public geographiesGeographyIDWaterMeasurementsParcelsParcelIDChartDataGet(geographyID: number, parcelID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ParcelWaterMeasurementChartDatumDto>>>;
    public geographiesGeographyIDWaterMeasurementsParcelsParcelIDChartDataGet(geographyID: number, parcelID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling geographiesGeographyIDWaterMeasurementsParcelsParcelIDChartDataGet.');
        }

        if (parcelID === null || parcelID === undefined) {
            throw new Error('Required parameter parcelID was null or undefined when calling geographiesGeographyIDWaterMeasurementsParcelsParcelIDChartDataGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ParcelWaterMeasurementChartDatumDto>>(`${this.basePath}/geographies/${encodeURIComponent(String(geographyID))}/water-measurements/parcels/${encodeURIComponent(String(parcelID))}/chart-data`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param geographyID 
     * @param parcelID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public geographiesGeographyIDWaterMeasurementsParcelsParcelIDExcelDownloadGet(geographyID: number, parcelID: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public geographiesGeographyIDWaterMeasurementsParcelsParcelIDExcelDownloadGet(geographyID: number, parcelID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public geographiesGeographyIDWaterMeasurementsParcelsParcelIDExcelDownloadGet(geographyID: number, parcelID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public geographiesGeographyIDWaterMeasurementsParcelsParcelIDExcelDownloadGet(geographyID: number, parcelID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling geographiesGeographyIDWaterMeasurementsParcelsParcelIDExcelDownloadGet.');
        }

        if (parcelID === null || parcelID === undefined) {
            throw new Error('Required parameter parcelID was null or undefined when calling geographiesGeographyIDWaterMeasurementsParcelsParcelIDExcelDownloadGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/geographies/${encodeURIComponent(String(geographyID))}/water-measurements/parcels/${encodeURIComponent(String(parcelID))}/excel-download`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param geographyID 
     * @param uploadedFile 
     * @param unitTypeID 
     * @param waterMeasurementTypeID 
     * @param effectiveDate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public geographiesGeographyIDWaterMeasurementsRasterUploadPost(geographyID: number, uploadedFile: Blob, unitTypeID: number, waterMeasurementTypeID: number, effectiveDate: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public geographiesGeographyIDWaterMeasurementsRasterUploadPost(geographyID: number, uploadedFile: Blob, unitTypeID: number, waterMeasurementTypeID: number, effectiveDate: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public geographiesGeographyIDWaterMeasurementsRasterUploadPost(geographyID: number, uploadedFile: Blob, unitTypeID: number, waterMeasurementTypeID: number, effectiveDate: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public geographiesGeographyIDWaterMeasurementsRasterUploadPost(geographyID: number, uploadedFile: Blob, unitTypeID: number, waterMeasurementTypeID: number, effectiveDate: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling geographiesGeographyIDWaterMeasurementsRasterUploadPost.');
        }

        if (uploadedFile === null || uploadedFile === undefined) {
            throw new Error('Required parameter uploadedFile was null or undefined when calling geographiesGeographyIDWaterMeasurementsRasterUploadPost.');
        }

        if (unitTypeID === null || unitTypeID === undefined) {
            throw new Error('Required parameter unitTypeID was null or undefined when calling geographiesGeographyIDWaterMeasurementsRasterUploadPost.');
        }

        if (waterMeasurementTypeID === null || waterMeasurementTypeID === undefined) {
            throw new Error('Required parameter waterMeasurementTypeID was null or undefined when calling geographiesGeographyIDWaterMeasurementsRasterUploadPost.');
        }

        if (effectiveDate === null || effectiveDate === undefined) {
            throw new Error('Required parameter effectiveDate was null or undefined when calling geographiesGeographyIDWaterMeasurementsRasterUploadPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data',
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (uploadedFile !== undefined) {
            formParams = formParams.append('UploadedFile', <any>uploadedFile) || formParams;
        }
        if (unitTypeID !== undefined) {
            formParams = formParams.append('UnitTypeID', <any>unitTypeID) || formParams;
        }
        if (waterMeasurementTypeID !== undefined) {
            formParams = formParams.append('WaterMeasurementTypeID', <any>waterMeasurementTypeID) || formParams;
        }
        if (effectiveDate !== undefined) {
            formParams = formParams.append('EffectiveDate', <any>effectiveDate) || formParams;
        }

        return this.httpClient.post<any>(`${this.basePath}/geographies/${encodeURIComponent(String(geographyID))}/water-measurements/raster-upload`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param geographyID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public geographiesGeographyIDWaterMeasurementsSourceOfRecordGet(geographyID: number, observe?: 'body', reportProgress?: boolean): Observable<WaterMeasurementTypeSimpleDto>;
    public geographiesGeographyIDWaterMeasurementsSourceOfRecordGet(geographyID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WaterMeasurementTypeSimpleDto>>;
    public geographiesGeographyIDWaterMeasurementsSourceOfRecordGet(geographyID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WaterMeasurementTypeSimpleDto>>;
    public geographiesGeographyIDWaterMeasurementsSourceOfRecordGet(geographyID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling geographiesGeographyIDWaterMeasurementsSourceOfRecordGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<WaterMeasurementTypeSimpleDto>(`${this.basePath}/geographies/${encodeURIComponent(String(geographyID))}/water-measurements/source-of-record`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * 
     * 
     * @param geographyID 
     * @param year 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public geographiesGeographyIDWaterMeasurementsYearsYearExcelDownloadGet(geographyID: number, year: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public geographiesGeographyIDWaterMeasurementsYearsYearExcelDownloadGet(geographyID: number, year: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public geographiesGeographyIDWaterMeasurementsYearsYearExcelDownloadGet(geographyID: number, year: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public geographiesGeographyIDWaterMeasurementsYearsYearExcelDownloadGet(geographyID: number, year: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling geographiesGeographyIDWaterMeasurementsYearsYearExcelDownloadGet.');
        }

        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling geographiesGeographyIDWaterMeasurementsYearsYearExcelDownloadGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/geographies/${encodeURIComponent(String(geographyID))}/water-measurements/years/${encodeURIComponent(String(year))}/excel-download`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

}

/**
 * Qanat.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AllocationPlanManageDto } from '../model/allocation-plan-manage-dto';
// @ts-ignore
import { AllocationPlanPeriodUpsertDto } from '../model/allocation-plan-period-upsert-dto';
// @ts-ignore
import { AllocationPlanPreviewChangesDto } from '../model/allocation-plan-preview-changes-dto';
// @ts-ignore
import { GeographyAllocationPlanConfigurationDto } from '../model/geography-allocation-plan-configuration-dto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class AllocationPlanService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param geographyID 
     * @param copyToAllocationPlanID 
     * @param copyFromAllocationPlanID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public copyAllocationPlanAllocationPlan(geographyID: number, copyToAllocationPlanID: number, copyFromAllocationPlanID: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public copyAllocationPlanAllocationPlan(geographyID: number, copyToAllocationPlanID: number, copyFromAllocationPlanID: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public copyAllocationPlanAllocationPlan(geographyID: number, copyToAllocationPlanID: number, copyFromAllocationPlanID: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public copyAllocationPlanAllocationPlan(geographyID: number, copyToAllocationPlanID: number, copyFromAllocationPlanID: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling copyAllocationPlanAllocationPlan.');
        }
        if (copyToAllocationPlanID === null || copyToAllocationPlanID === undefined) {
            throw new Error('Required parameter copyToAllocationPlanID was null or undefined when calling copyAllocationPlanAllocationPlan.');
        }
        if (copyFromAllocationPlanID === null || copyFromAllocationPlanID === undefined) {
            throw new Error('Required parameter copyFromAllocationPlanID was null or undefined when calling copyAllocationPlanAllocationPlan.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/allocation-plans/${this.configuration.encodeParam({name: "copyToAllocationPlanID", value: copyToAllocationPlanID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/copy-from/${this.configuration.encodeParam({name: "copyFromAllocationPlanID", value: copyFromAllocationPlanID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param allocationPlanID 
     * @param allocationPlanPeriodUpsertDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodUpsertDto?: AllocationPlanPeriodUpsertDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<AllocationPlanManageDto>;
    public createAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodUpsertDto?: AllocationPlanPeriodUpsertDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AllocationPlanManageDto>>;
    public createAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodUpsertDto?: AllocationPlanPeriodUpsertDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AllocationPlanManageDto>>;
    public createAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodUpsertDto?: AllocationPlanPeriodUpsertDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling createAllocationPlanPeriodAllocationPlan.');
        }
        if (allocationPlanID === null || allocationPlanID === undefined) {
            throw new Error('Required parameter allocationPlanID was null or undefined when calling createAllocationPlanPeriodAllocationPlan.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/allocation-plans/${this.configuration.encodeParam({name: "allocationPlanID", value: allocationPlanID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<AllocationPlanManageDto>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: allocationPlanPeriodUpsertDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param geographyAllocationPlanConfigurationDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createGeographyAllocationPlanConfigurationAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<GeographyAllocationPlanConfigurationDto>;
    public createGeographyAllocationPlanConfigurationAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GeographyAllocationPlanConfigurationDto>>;
    public createGeographyAllocationPlanConfigurationAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GeographyAllocationPlanConfigurationDto>>;
    public createGeographyAllocationPlanConfigurationAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling createGeographyAllocationPlanConfigurationAllocationPlan.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/allocation-plan-configuration`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GeographyAllocationPlanConfigurationDto>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: geographyAllocationPlanConfigurationDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param allocationPlanID 
     * @param allocationPlanPeriodID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodID: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodID: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodID: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodID: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling deleteAllocationPlanPeriodAllocationPlan.');
        }
        if (allocationPlanID === null || allocationPlanID === undefined) {
            throw new Error('Required parameter allocationPlanID was null or undefined when calling deleteAllocationPlanPeriodAllocationPlan.');
        }
        if (allocationPlanPeriodID === null || allocationPlanPeriodID === undefined) {
            throw new Error('Required parameter allocationPlanPeriodID was null or undefined when calling deleteAllocationPlanPeriodAllocationPlan.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/allocation-plans/${this.configuration.encodeParam({name: "allocationPlanID", value: allocationPlanID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/${this.configuration.encodeParam({name: "allocationPlanPeriodID", value: allocationPlanPeriodID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllocationPlanConfigurationByGeographyIDAllocationPlan(geographyID: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<GeographyAllocationPlanConfigurationDto>;
    public getAllocationPlanConfigurationByGeographyIDAllocationPlan(geographyID: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GeographyAllocationPlanConfigurationDto>>;
    public getAllocationPlanConfigurationByGeographyIDAllocationPlan(geographyID: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GeographyAllocationPlanConfigurationDto>>;
    public getAllocationPlanConfigurationByGeographyIDAllocationPlan(geographyID: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling getAllocationPlanConfigurationByGeographyIDAllocationPlan.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/allocation-plan-configuration`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GeographyAllocationPlanConfigurationDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param geographyAllocationPlanConfigurationDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public previewGeographyAllocationPlanConfigurationUpdateAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<AllocationPlanPreviewChangesDto>>;
    public previewGeographyAllocationPlanConfigurationUpdateAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<AllocationPlanPreviewChangesDto>>>;
    public previewGeographyAllocationPlanConfigurationUpdateAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<AllocationPlanPreviewChangesDto>>>;
    public previewGeographyAllocationPlanConfigurationUpdateAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling previewGeographyAllocationPlanConfigurationUpdateAllocationPlan.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/allocation-plan-configuration/preview`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<AllocationPlanPreviewChangesDto>>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: geographyAllocationPlanConfigurationDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param geographyAllocationPlanConfigurationDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAllocationPlanConfigurationAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<GeographyAllocationPlanConfigurationDto>;
    public updateAllocationPlanConfigurationAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GeographyAllocationPlanConfigurationDto>>;
    public updateAllocationPlanConfigurationAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GeographyAllocationPlanConfigurationDto>>;
    public updateAllocationPlanConfigurationAllocationPlan(geographyID: number, geographyAllocationPlanConfigurationDto?: GeographyAllocationPlanConfigurationDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling updateAllocationPlanConfigurationAllocationPlan.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'text/plain',
            'application/json',
            'text/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/allocation-plan-configuration`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GeographyAllocationPlanConfigurationDto>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: geographyAllocationPlanConfigurationDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param geographyID 
     * @param allocationPlanID 
     * @param allocationPlanPeriodID 
     * @param allocationPlanPeriodUpsertDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodID: number, allocationPlanPeriodUpsertDto?: AllocationPlanPeriodUpsertDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public updateAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodID: number, allocationPlanPeriodUpsertDto?: AllocationPlanPeriodUpsertDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public updateAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodID: number, allocationPlanPeriodUpsertDto?: AllocationPlanPeriodUpsertDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public updateAllocationPlanPeriodAllocationPlan(geographyID: number, allocationPlanID: number, allocationPlanPeriodID: number, allocationPlanPeriodUpsertDto?: AllocationPlanPeriodUpsertDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (geographyID === null || geographyID === undefined) {
            throw new Error('Required parameter geographyID was null or undefined when calling updateAllocationPlanPeriodAllocationPlan.');
        }
        if (allocationPlanID === null || allocationPlanID === undefined) {
            throw new Error('Required parameter allocationPlanID was null or undefined when calling updateAllocationPlanPeriodAllocationPlan.');
        }
        if (allocationPlanPeriodID === null || allocationPlanPeriodID === undefined) {
            throw new Error('Required parameter allocationPlanPeriodID was null or undefined when calling updateAllocationPlanPeriodAllocationPlan.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/geographies/${this.configuration.encodeParam({name: "geographyID", value: geographyID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/allocation-plans/${this.configuration.encodeParam({name: "allocationPlanID", value: allocationPlanID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/${this.configuration.encodeParam({name: "allocationPlanPeriodID", value: allocationPlanPeriodID, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: allocationPlanPeriodUpsertDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
